# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1}, ${2}> map ${3}
# map iterator
snippet mit
	std::map<${1}, ${2}>::iterator ${3}
# const map iterator
snippet cmit
	std::map<${1}, ${2}>::const_iterator ${3}
# std::vector
snippet vector
	std::vector<${1}> ${2}
# std::vector iterator
snippet vit
	std::vector<${1}>::iterator ${2}
# std:: vector const_iterator
snippet cvit
	std::vector<${1}>::const_iterator ${2}
# std::list
snippet list
	std::list<${1}> ${2}
# std::list iterator
snippet lit
	std::list<${1}>::iterator ${2}
# std::list const_iterator
snippet clit
	std::list<${1}>::const_iterator ${2}
snippet push
	push_back(${1});
snippet str
	std::string ${1}
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
# Class
snippet cl
	class ${1:`Filename('$1_t', 'name')`} {
	public:
		$1 (${2:arguments});
		virtual ~$1 ();
	
	private:

	};

# BOOST
snippet each
	BOOST_FOREACH (${1},) {
	
	}
#cout
snippet cout
	std::cout << 
#endl
snippet endl
	std::endl;
